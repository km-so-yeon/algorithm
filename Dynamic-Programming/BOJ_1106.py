import sys
input = sys.stdin.readline

# DP의 모든 초기값 1001(최대값)
# DP = 해당 인덱스 만큼의 고객을 늘리기 위해 투자해야하는 비용
# 비용 FEE 과 고객의 수 CST
# 첫번째 주어진 비용이 1이고 고객의 수가 1일 때
#   1명을 만드려면 0명에 1명을 더하는 것 DP[0] + 1 = DP[1-1] + 1 = 1 -> 이 값이 초기값보다 작으므로 DP[1] = 1
#   2명을 만드려면 1명에 1명을 더하는 것 DP[1] + 1 = DP[2-1] + 1 = 2 -> 이 값이 초기값보다 작으므로 DP[2] = 2
#   3명을 만드려면 2명에 1명을 더하는 것 DP[2] + 1 = DP[3-1] + 1 = 3 -> 이 값이 초기값보다 작으므로 DP[3] = 3
#   4명을 만드려면 3명에 1명을 더하는 것 DP[3] + 1 = DP[4-1] + 1 = 4 -> 이 값이 초기값보다 작으므로 DP[4] = 4
#   5명을 만드려면 4명에 1명을 더하는 것 DP[4] + 1 = DP[5-1] + 1 = 5 -> 이 값이 초기값보다 작으므로 DP[5] = 5
# 두번째 주어진 비용이 3이고 고객의 수가 5일 때
#   5명을 만드려면 0명에 5명을 더하는 것 DP[0] + 3 = DP[5-5] + 3 = 3 -> 이 값이 이전값보다 작으므로 DP[5] = 3
#   6명을 만드려면 1명에 5명을 더하는 것 DP[1] + 3 = DP[6-5] + 3 = 4 -> 이 값이 이전값보다 작으므로 DP[6] = 4
# 일반화
# 해당 인덱스만큼의 고객을 늘리기 위한 비용 = (DP[해당값 - 고객수] + 비용)과 DP[해당값] 중 최솟값

# 입력
C, N = map(int, input().split())
DP = [1001] * 1001
DP[0] = 0
cities = []

for _ in range(N) :
    cities.append(list(map(int, input().split())))

# 고객의 수가 적은 것부터 수행
cities.sort(key=lambda x:x[1])

for city in cities :
    fee = city[0]
    cst = city[1]
    for i in range(cst, 1001) :
        DP[i] = min(DP[i - cst] + fee, DP[i])

# 출력
# 적어도 C 이상의 고객을 늘여야하므로, C이상의 고객 중 최소의 비용이 드는 값으로 출력
print(min(DP[C:]))